{"version":3,"sources":["serviceWorker.js","redux/reducers/reducer.js","redux/store.js","redux/actions/actionsTypes.js","firebase.js","components/ButtonAdd/ButtonAdd.jsx","components/TextField/TextField.jsx","components/ToDoAdd.jsx","redux/actions/actions.js","components/NavigationButton/NavButton.jsx","components/ToDoStatus.jsx","components/ItemList.jsx","components/ToDoCompleted.jsx","components/ToDoInCompleted.jsx","redux/actions/fetchActions.js","components/ToDoAll.jsx","components/BGAnimation/Background.jsx","components/ToDoApp.jsx","index.js"],"names":["Boolean","window","location","hostname","match","initialState","todos","todoLength","loading","errorMessage","store","createStore","state","action","type","payload","length","console","log","applyMiddleware","thunk","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","FloatingActionButtons","color","size","style","onClick","Fab","aria-label","useStyles","makeStyles","theme","root","width","margin","spacing","borderColor","BasicTextFields","variant","label","onChange","value","inputStyle","labelStyle","classes","className","noValidate","autoComplete","TextField","inputProps","InputLabelProps","connect","dispatch","addToDoItem","Element","ref","child","push","title","status","key","update","id","useState","setValue","e","target","name","fontFamily","marginLeft","padding","fontSize","actionItemStyles","selected","SimpleBottomNavigation","first","second","third","React","toHome","setToHome","toCompleted","setToCompleted","toInCompleted","setToInCompleted","RedirectToHome","to","RedirectToCompleted","RedirectToIncompleted","Fragment","BottomNavigation","event","newValue","showLabels","BottomNavigationAction","icon","ToDoStatus","display","flexDirection","height","justifyContent","order","backgroundColor","zIndex","maxHeight","overflow","borderRadius","oneItem","marginRight","changeToDoItem","obj","changeStatus","deleteTodoItem","remove","currentTodosList","handleToggle","deleteItem","List","map","ListItem","role","undefined","dense","button","ListItemIcon","Checkbox","edge","checked","tabIndex","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","newTodos","setNewTodos","useEffect","arr","item","find","marginTop","textAlign","fetchingDataSucceses","startFetchingData","on","snap","a","async","val","Object","values","error","fetchingDataError","Background","src","alt","Badge","overlap","max","badgeContent","position","top","left","exact","path","component","ToDoAll","ToDoCompleted","ToDoInCompleted","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.909ebec5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  ADD_TODO_ITEM,\r\n  CHANGE_TODO_STATUS,\r\n  DELETE_TODO_ITEM,\r\n  FETCHING_DATA,\r\n  FETCH_DATA_SUCCESES,\r\n  FETCH_DATA_ERROR\r\n} from \"../actions/actionsTypes\";\r\n\r\nlet initialState = {\r\n  todos: [],\r\n  todoLength: 0,\r\n  loading: false,\r\n  errorMessage: \"\"\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case FETCHING_DATA:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    case FETCH_DATA_SUCCESES:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        todos: action.payload,\r\n        todoLength: action.payload.length\r\n      };\r\n    case FETCH_DATA_ERROR:\r\n      return {\r\n        ...state,\r\n        todos: [],\r\n        loading: false,\r\n        errorMessage: action.payload\r\n      };\r\n    case ADD_TODO_ITEM:\r\n      return {\r\n        ...state,\r\n        todoLength: state.todoLength + 1\r\n      };\r\n\r\n    case DELETE_TODO_ITEM:\r\n      return {\r\n        ...state,\r\n        todoLength: --state.todos.length\r\n      };\r\n\r\n    case CHANGE_TODO_STATUS:\r\n      console.log('asd');\r\n      \r\n      return {\r\n        ...state,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"./reducers/reducer\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;\r\n","const ADD_TODO_ITEM = \"ADD_TODO_ITEM\";\r\nconst CHANGE_TODO_STATUS = \"CHANGE_TODO_STATUS\";\r\nconst DELETE_TODO_ITEM = \"DELETE_TODO_ITEM\";\r\nconst FETCHING_DATA = \"FETCHING_DATA\";\r\nconst FETCH_DATA_SUCCESES = \"FETCH_DATA_SUCCESES\";\r\nconst FETCH_DATA_ERROR = \"FETCH_DATA_ERROR\";\r\n\r\nexport { \r\n    ADD_TODO_ITEM, \r\n    CHANGE_TODO_STATUS, \r\n    DELETE_TODO_ITEM,\r\n    FETCHING_DATA,\r\n    FETCH_DATA_SUCCESES,\r\n    FETCH_DATA_ERROR\r\n};\r\n","import firebase from 'firebase';\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBdwF5X33Sbx6NZbOhcTpLjoJ9enhx4pV4\",\r\n    authDomain: \"todolist-5f89f.firebaseapp.com\",\r\n    databaseURL: \"https://todolist-5f89f.firebaseio.com\",\r\n    projectId: \"todolist-5f89f\",\r\n    storageBucket: \"todolist-5f89f.appspot.com\",\r\n    messagingSenderId: \"44091671391\",\r\n    appId: \"1:44091671391:web:71ed9243c8a4ade4532cea\",\r\n    measurementId: \"G-DQWLZZDZZP\"\r\n  };\r\n\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  export const database = firebase.database();","import React from \"react\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n\r\nexport default function FloatingActionButtons({ color, size, style, onClick }) {\r\n\r\n  return (\r\n      <Fab\r\n        color={color}\r\n        size={size}\r\n        style={style}\r\n        onClick={onClick}\r\n        aria-label=\"add\"\r\n      >\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport '../../style.css';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '80%',\r\n    \"& > *\": {\r\n      margin: theme.spacing(1),\r\n      width: '100%',\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#f50057',\r\n      },\r\n    },\r\n    '& > label': {\r\n      color: 'red'\r\n    },\r\n  }\r\n}));\r\n\r\nexport default function BasicTextFields({\r\n  variant,\r\n  label,\r\n  color,\r\n  onChange,\r\n  style,\r\n  value,\r\n  inputStyle,\r\n  labelStyle\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <form className={classes.root} noValidate autoComplete=\"off\">\r\n      <TextField\r\n        label={label}\r\n        variant={variant}\r\n        color={color}\r\n        onChange={onChange}\r\n        style={style}\r\n        value={value}\r\n        inputProps={{ style: inputStyle}}\r\n        InputLabelProps={{style: labelStyle}}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addToDoItem } from \"../redux/actions/actions\";\r\nimport \"../style.css\";\r\n\r\nimport AddButton from \"../components/ButtonAdd/ButtonAdd\";\r\nimport Input from \"../components/TextField/TextField\";\r\nimport { useMediaQuery } from \"@material-ui/core\";\r\n\r\n\r\nfunction ToDoAdd({ addToDoItem }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  function handleValue(e) {\r\n    setValue(e.target.value);\r\n  }\r\n\r\n  function saveToDo() {\r\n    if (value) {\r\n      addToDoItem(value);\r\n      setValue(\"\");\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"addTodoDiv\">\r\n      <Input\r\n        onChange={handleValue}\r\n        label=\"some todo\"\r\n        name=\"todo\"\r\n        type=\"text\"\r\n        value={value}\r\n        variant=\"outlined\"\r\n        color=\"secondary\"\r\n        style={{\r\n          width: \"100%\",\r\n          fontFamily: \"cursive\",\r\n        }}\r\n        inputStyle={{ color: \"#f50057\" }}\r\n        labelStyle={{ color: \"#f50057\" }}\r\n      ></Input>\r\n      <AddButton onClick={saveToDo} color=\"secondary\" size=\"medium\" style={{marginLeft: '15px'}}></AddButton>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    todoLength: state.todoLength\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    addToDoItem: value => {\r\n      dispatch(addToDoItem(value));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoAdd);\r\n","import {\r\n  ADD_TODO_ITEM,\r\n  CHANGE_TODO_STATUS,\r\n  DELETE_TODO_ITEM\r\n} from \"../actions/actionsTypes\";\r\nimport { database } from \"../../firebase\";\r\n\r\nconst addToDoItem = value => dispatch => {\r\n  const Element = database\r\n    .ref()\r\n    .child(\"ToDoList\")\r\n    .push({ title: value, status: true }).key;\r\n  database\r\n    .ref()\r\n    .child(`ToDoList/${Element}`)\r\n    .update({ id: Element });\r\n  dispatch({ type: ADD_TODO_ITEM });\r\n};\r\n\r\nconst deleteTodoItem = id => dispatch => {\r\n  database\r\n    .ref()\r\n    .child(`ToDoList/${id}`)\r\n    .remove();\r\n  dispatch({ type: DELETE_TODO_ITEM });\r\n};\r\n\r\nconst changeStatus = obj => dispatch => {\r\n  database\r\n    .ref()\r\n    .child(`ToDoList/${obj.id}`)\r\n    .update({\r\n      status: !obj.status\r\n    });\r\n  dispatch({ type: CHANGE_TODO_STATUS });\r\n};\r\n\r\nexport { addToDoItem, deleteTodoItem, changeStatus };\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\r\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport PlaylistAddCheckTwoToneIcon from \"@material-ui/icons/PlaylistAddCheckTwoTone\";\r\nimport SubjectTwoToneIcon from \"@material-ui/icons/SubjectTwoTone\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: 500,\r\n    '& > *': {\r\n      padding: 0,\r\n      '& .MuiBottomNavigationAction-label.Mui-selected': {\r\n        fontSize: '17px'\r\n      }\r\n    }\r\n  },\r\n  actionItemStyles: {\r\n    \"&$selected\": {\r\n      color: \"red\",\r\n    }\r\n  },\r\n  // This is required for the '&$selected' selector to work\r\n  selected: {}\r\n})\r\n\r\nexport default function SimpleBottomNavigation({\r\n  first,\r\n  second,\r\n  third,\r\n  size,\r\n  style\r\n}) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n  const [toHome, setToHome] = React.useState(false);\r\n  const [toCompleted, setToCompleted] = React.useState(false);\r\n  const [toInCompleted, setToInCompleted] = React.useState(false);\r\n\r\n  const RedirectToHome = toHome ? <Redirect to=\"/\" /> : null;\r\n  const RedirectToCompleted = toCompleted ? <Redirect to=\"/completed\" /> : null;\r\n  const RedirectToIncompleted = toInCompleted ? (\r\n    <Redirect to=\"/incompleted\" />\r\n  ) : null;\r\n  return (\r\n    <React.Fragment>\r\n      {RedirectToHome}\r\n      {RedirectToCompleted}\r\n      {RedirectToIncompleted}\r\n      <BottomNavigation\r\n        value={value}\r\n        onChange={(event, newValue) => {\r\n          setValue(newValue);\r\n        }}\r\n        showLabels\r\n        className={classes.root}\r\n        style={style}\r\n      >\r\n        <BottomNavigationAction\r\n          onClick={() => {\r\n            setToHome(true);\r\n            setToCompleted(false);\r\n            setToInCompleted(false);\r\n          }}\r\n          classes={{\r\n            root: classes.actionItemStyles,\r\n            selected: classes.selected\r\n          }}\r\n          label={first}\r\n          icon={<PlaylistAddIcon fontSize={size} />}\r\n        />\r\n        <BottomNavigationAction\r\n          onClick={() => {\r\n            setToCompleted(true);\r\n            setToHome(false);\r\n            setToInCompleted(false);\r\n          }}\r\n          classes={{\r\n            root: classes.actionItemStyles,\r\n            selected: classes.selected\r\n          }}\r\n          label={second}\r\n          icon={<PlaylistAddCheckTwoToneIcon fontSize={size} />}\r\n        />\r\n        <BottomNavigationAction\r\n          onClick={() => {\r\n            setToInCompleted(true);\r\n            setToHome(false);\r\n            setToCompleted(false);\r\n          }}\r\n          classes={{\r\n            root: classes.actionItemStyles,\r\n            selected: classes.selected\r\n          }}\r\n          label={third}\r\n          icon={<SubjectTwoToneIcon fontSize={size} />}\r\n        />\r\n      </BottomNavigation>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../style.css\";\r\nimport NavBtn from \"./NavigationButton/NavButton\";\r\n\r\nexport default function ToDoStatus() {\r\n  return (\r\n\r\n      <NavBtn\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          height: \"100%\",\r\n          width: \"85px\",\r\n          justifyContent: \"space-between\",\r\n          order: '0',\r\n          backgroundColor: 'rgba(161, 40, 77, 0.49)',\r\n          zIndex: '1',\r\n        }}\r\n        first=\"All\"\r\n        second=\"Done\"\r\n        third=\"Not Done\"\r\n        size=\"large\"\r\n      ></NavBtn>\r\n\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffRoundedIcon from \"@material-ui/icons/HighlightOffRounded\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { changeStatus, deleteTodoItem } from \"../redux/actions/actions\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '80%',\r\n    // minWidth: 300,\r\n    // maxWidth: 600,\r\n    maxHeight: 570,\r\n    overflow: \"hidden\",\r\n    backgroundColor: \"rgba(161, 40, 77, 0.49)\",\r\n    borderRadius: \"8px\"\r\n  },\r\n  oneItem: {\r\n    color: \"white\",\r\n    overflow: 'hidden',\r\n    marginRight: '10px',\r\n  }\r\n}));\r\n\r\nfunction ToDoList({ changeToDoItem, deleteTodoItem, currentTodosList }) {\r\n  const classes = useStyles();\r\n  const handleToggle = value => () => changeToDoItem(value);\r\n  const deleteItem = value => () => deleteTodoItem(value);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {currentTodosList.map(value => {\r\n        return (\r\n          <ListItem\r\n            key={value.id}\r\n            role={undefined}\r\n            dense\r\n            button\r\n            onClick={handleToggle(value)}\r\n          >\r\n            <ListItemIcon>\r\n              <Checkbox\r\n                edge=\"start\"\r\n                checked={value.status === false}\r\n                tabIndex={-1}\r\n                disableRipple\r\n                inputProps={{ \"aria-labelledby\": value.id }}\r\n                color=\"secondary\"\r\n              />\r\n            </ListItemIcon>\r\n            <ListItemText\r\n              className={classes.oneItem}\r\n              value={value.id}\r\n              id={value.id}\r\n              primary={value.title}\r\n            />\r\n            <ListItemSecondaryAction>\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"comments\"\r\n                onClick={deleteItem(value.id)}\r\n                color={\"secondary\"}\r\n              >\r\n                <HighlightOffRoundedIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeToDoItem: obj => {\r\n      dispatch(changeStatus(obj));\r\n    },\r\n    deleteTodoItem: id => {\r\n      dispatch(deleteTodoItem(id));\r\n    }\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(ToDoList);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../style.css\";\r\nimport ToDoList from \"./ItemList\";\r\nimport MoodBadTwoToneIcon from \"@material-ui/icons/MoodBadTwoTone\";\r\n\r\nfunction ToDoCompleted({ todos }) {\r\n  const [newTodos, setNewTodos] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    let arr = [];\r\n    todos.map(item => {\r\n      if (item.status === false) {\r\n        arr.push(item);\r\n        setNewTodos(arr);\r\n      }\r\n    });\r\n  }, [todos]);\r\n  return (\r\n    <React.Fragment>\r\n      {todos.find(({ status }) => status === false) ? (\r\n        <ToDoList currentTodosList={newTodos} />\r\n      ) : (\r\n        <React.Fragment>\r\n          <MoodBadTwoToneIcon fontSize=\"large\" style={{ marginTop: \"10%\", zIndex: '2', color: '#f50057' }} />\r\n          <p style={{zIndex: '2', textAlign: 'center',fontSize: '30px', color: '#f50057'}}>You haven't anything  To Do!</p>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ todos: state.todos });\r\n\r\nexport default connect(mapStateToProps)(ToDoCompleted);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../style.css\";\r\nimport ToDoList from \"./ItemList\";\r\nimport MoodBadTwoToneIcon from \"@material-ui/icons/MoodBadTwoTone\";\r\n\r\nfunction ToDoInCompleted({ todos }) {\r\n  const [newTodos, setNewTodos] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    let arr = [];\r\n    todos.map(item => {\r\n      if (item.status === true) {\r\n        arr.push(item);\r\n        setNewTodos(arr);\r\n      }\r\n    });\r\n  }, [todos]);\r\n  return (\r\n    <React.Fragment>\r\n      {todos.find(({ status }) => status === true) ? (\r\n        <ToDoList currentTodosList={newTodos} />\r\n      ) : (\r\n        <React.Fragment>\r\n          <MoodBadTwoToneIcon fontSize=\"large\" style={{ marginTop: \"10%\", zIndex: '2', color: '#f50057' }} />\r\n          <p style={{zIndex: '2', textAlign: 'center', fontSize: '30px', color: '#f50057'}}>You haven't anything  To Do!</p>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ todos: state.todos });\r\n\r\nexport default connect(mapStateToProps)(ToDoInCompleted);\r\n","import {\r\n  FETCHING_DATA,\r\n  FETCH_DATA_SUCCESES,\r\n  FETCH_DATA_ERROR\r\n} from \"./actionsTypes\";\r\n\r\nimport store from \"../store\";\r\nimport { database } from \"../../firebase\";\r\n\r\nconst fetchingData = () => ({\r\n  type: FETCHING_DATA,\r\n  payload: []\r\n});\r\n\r\nconst fetchingDataSucceses = todos => ({\r\n  type: FETCH_DATA_SUCCESES,\r\n  loading: false,\r\n  payload: todos,\r\n  errorMessage: \"\"\r\n});\r\n\r\nconst fetchingDataError = error => ({\r\n  type: FETCH_DATA_ERROR,\r\n  loading: false,\r\n  payload: [],\r\n  errorMessage: error\r\n});\r\n\r\nconst startFetchingData = () => dispatch => {\r\n  store.dispatch(fetchingData());\r\n  try {\r\n    database.ref(\"ToDoList\").on(\"value\", async snap => {\r\n      if (snap && snap.val() && Object.values(snap.val())) {\r\n        let todos = await Object.values(snap.val());\r\n        dispatch(fetchingDataSucceses(todos));\r\n      }\r\n    });\r\n  } catch (error) {\r\n    dispatch(fetchingDataError(error));\r\n  }\r\n};\r\n\r\nexport { startFetchingData };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../style.css\";\r\nimport ToDoList from \"./ItemList\";\r\nimport MoodBadTwoToneIcon from \"@material-ui/icons/MoodBadTwoTone\";\r\nimport { startFetchingData } from \"../redux/actions/fetchActions\";\r\n\r\nfunction ToDoAll({ todos, startFetchingData }) {\r\n  React.useEffect(() => {\r\n     startFetchingData();\r\n     console.log('todos: ', todos);\r\n     \r\n  }, [startFetchingData]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      { todos && todos.length > 0 ? (\r\n        <ToDoList currentTodosList={todos} />\r\n      ) : (\r\n        <React.Fragment>\r\n          <MoodBadTwoToneIcon fontSize=\"large\" style={{ marginTop: \"10%\", zIndex: '2', color: '#f50057' }} />\r\n          <p style={{zIndex: '2', textAlign: 'center', fontSize: '30px', color: '#f50057'}}>You haven't anything  To Do!</p>\r\n        </React.Fragment>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ todos: state.todos });\r\nconst mapDispatchToProps = dispatch => ({\r\n  startFetchingData: () => dispatch(startFetchingData())\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDoAll);\r\n","import React from \"react\";\r\nimport './bg.css';\r\n\r\nexport default function Background() {\r\n  return (\r\n    <React.Fragment>\r\n      <div className=\"background-container\">\r\n      <img\r\n        src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/1231630/moon2.png\"\r\n        alt=\"111\"\r\n      ></img>\r\n      <div className=\"stars\"></div>\r\n      <div className=\"twinkling\"></div>\r\n      <div className=\"clouds\"></div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ToDoAdd from \"./ToDoAdd\";\r\nimport ToDoStatus from \"./ToDoStatus\";\r\nimport ToDoCompleted from \"./ToDoCompleted\";\r\nimport ToDoInCompleted from \"./ToDoInCompleted\";\r\nimport ToDoAll from './ToDoAll';\r\n\r\nimport Badge from '@material-ui/core/Badge';\r\nimport NotificationsActiveOutlinedIcon from '@material-ui/icons/NotificationsActiveOutlined';\r\nimport { connect } from \"react-redux\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport \"../style.css\";\r\nimport Background from \"./BGAnimation/Background\";\r\n\r\nfunction ToDoApp({ todoLength }) {\r\n  return (\r\n    <div className=\"mainBlock\">\r\n      <Background/>\r\n      <Router>\r\n        <div className=\"functionallDiv\">\r\n          <div className=\"header\">\r\n            <h2 className=\"titleName\">TODO APP</h2>\r\n            <Badge\r\n            overlap=\"circle\"\r\n              max={9}\r\n              badgeContent={todoLength}\r\n              color=\"secondary\"\r\n              style={{\r\n                position: 'absolute',\r\n                top: '15px',\r\n                left: '20px',\r\n                zIndex: '2',\r\n            \r\n              }}\r\n            ><NotificationsActiveOutlinedIcon fontSize='large'/></Badge>\r\n          </div>\r\n          <ToDoAdd />\r\n          <Route exact path=\"/\" component={ToDoAll} />\r\n          <Route path=\"/completed\" component={ToDoCompleted} />\r\n          <Route path=\"/incompleted\" component={ToDoInCompleted} />\r\n        </div>\r\n        <ToDoStatus />\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({ todoLength: state.todoLength });\r\n\r\nexport default connect(mapStateToProps)(ToDoApp);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nimport ToDoApp from \"./components/ToDoApp\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <ToDoApp />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}